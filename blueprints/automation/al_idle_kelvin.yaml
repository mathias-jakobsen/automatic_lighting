blueprint:
  name: Automatic Lighting - Idle (Kelvin)
  description: |
    Uses the 'Automatic Lighting' integration to create a profile that will turn on lighting when a no trigger is triggered.
  domain: automation
  input:
    id:
      name: Id
      description: The id of the automation. Must be an unique value.
      selector:
        text:
    al_entity:
      name: AL Entity
      description: The automatic lighting entity that is used to control the lighting.
      selector:
        entity:
          integration: automatic_lighting
    lights:
      name: Lights
      description: The lights that should be turned on.
      selector:
        target:
          entity:
            domain: light
    time_after:
      name: After
      description: The time after which the lights can be turned on.
      default: "00:00:00"
      selector:
        time:
    time_before:
      name: Before
      description: The time before which the lights can be turned on.
      default: "23:59:59"
      selector:
        time:
    illuminance_entity:
      name: Daylight Sensor
      description: The entity that measures the amount of daylight.
      selector:
        entity:
          domain: sensor
          device_class: illuminance
    illuminance_threshold:
      name: Daylight Threshold
      description: Defines the threshold of daylight below which the lights are turned on.
      default: 100
      selector:
        number:
          mode: box
          min: 1
          max: 100000
          unit_of_measurement: lx
    brightness:
      name: Brightness
      description: The brightness (in %) that the lights should be set to when turned on.
      default: 100
      selector:
        number:
          mode: slider
          min: 1
          max: 100
          step: 1
          unit_of_measurement: "%"
    color_temp_kelvin:
      name: Color Temperature
      description: The color temperature (in kelvin) that the lights should be set to when turned on.
      default: 3000
      selector:
        number:
          mode: slider
          min: 2200
          max: 6500
          step: 25
          unit_of_measurement: K

max_exceeded: silent
mode: restart

variables:
  al_entity: !input al_entity
  id: !input id
  illuminance_entity: !input illuminance_entity
  illuminance_threshold: !input illuminance_threshold
trigger:
  - platform: event
    event_type: automatic_lighting_event
    event_data:
      entity_id: !input al_entity
  - platform: state
    entity_id: !input illuminance_entity
action:
  - choose:
      - conditions:
          - "{{ trigger.platform == 'event' and trigger.event.event_type == 'automatic_lighting_event' and trigger.event.data.type == 'reset' }}"
        sequence:
          - service: automatic_lighting.track_lights
            data:
              entity_id: !input al_entity
              lights: !input lights


      - conditions:
          - condition: or
            conditions:
              - "{{ trigger.platform == 'event' and trigger.event.event_type == 'automatic_lighting_event' and trigger.event.data.type == 'request' }}"
              - "{{ states(al_entity) == 'idle' and state_attr(al_entity, 'id') != id }}"
          - "{{ states(illuminance_entity)|float <= illuminance_threshold|float }}"
        sequence:
          - service: automatic_lighting.turn_on
            data:
              entity_id: !input al_entity
              id: "{{ id }}"
              state: idle
              lights: !input lights
              brightness_pct: !input brightness
              kelvin: !input color_temp_kelvin
          - wait_for_trigger:
              - platform: numeric_state
                entity_id: !input illuminance_entity
                above: !input illuminance_threshold
              - platform: state
                entity_id: !input al_entity
                from: "idle"
          - choose:
              - conditions:
                  - "{{ states(al_entity) == 'idle' and state_attr(al_entity, 'id') == id }}"
                sequence:
                  - service: automatic_lighting.turn_off
                    data:
                      entity_id: !input al_entity
